#version 330 core

const int MAX_COUNT_OF_LIGHT_SOURCES = 5;

in vec2 TexCoord;
in vec3 Normal;
in vec4 point_pos;
in vec4 point_pos_light_space[MAX_COUNT_OF_LIGHT_SOURCES];


struct LightSource {
    vec3 position;
    vec3 color;
    float intensity;
};

uniform LightSource light_sources[MAX_COUNT_OF_LIGHT_SOURCES];
uniform int is_shadowed_fs[MAX_COUNT_OF_LIGHT_SOURCES];

uniform int count_of_light_sources;
uniform vec3 camera_pos;
uniform sampler2D Texture;
uniform sampler2D depth_map0;
uniform sampler2D depth_map1;
uniform sampler2D depth_map2;
uniform sampler2D depth_map3;
uniform sampler2D depth_map4;
uniform vec4 color;

out vec4 out_color;

vec3 calc_diffusion(LightSource light_source, vec3 light_dir, vec3 norm) {
    float diff = max(dot(norm, light_dir), 0.0);
    vec3 diffusion = diff * light_source.color;
    return diffusion;
}

vec3 calc_specular(LightSource light_source, vec3 light_dir, vec3 norm) {
    vec3 view_dir = normalize(camera_pos - vec3(point_pos));
    vec3 reflect_dir = reflect(-light_dir, norm);

    float spec = pow(max(dot(view_dir, reflect_dir), 0.0), 16);
    vec3 specular = 0.2f * spec * light_source.color;
    return specular;
}

float calc_attenuation(float dist) {
    return  1.0f / (1.0f + 0.007f * dist + 0.0002f * dist * dist);
}

vec3 calc_light_effect(LightSource light_source, vec3 norm) {
    vec3 light_dir = normalize(light_source.position - vec3(point_pos));

    vec3 diffusion = calc_diffusion(light_source, light_dir, norm);
    vec3 specular = calc_specular(light_source, light_dir, norm);

    if (diffusion == vec3(0.0, 0.0, 0.0)) {
        specular = vec3(0.0f, 0.0f, 0.0f);
    }

    float attenuation = calc_attenuation(distance(light_source.position, vec3(point_pos)));

    return attenuation * (diffusion + specular);
}

float get_depth(int i, vec2 vec) {
    if (i == 0) {
        return texture(depth_map0, vec).r;
    } else if (i == 1) {
        return texture(depth_map1, vec).r;
    } else if (i == 2) {
        return texture(depth_map2, vec).r;
    } else if (i == 3) {
        return texture(depth_map3, vec).r;
    } else if (i == 4) {
        return texture(depth_map4, vec).r;
    }
}

ivec2 get_texture_size(int i) {
    if (i == 0) {
        return textureSize(depth_map0, 0);
    } else if (i == 1) {
        return textureSize(depth_map1, 0);
    } else if (i == 2) {
        return textureSize(depth_map2, 0);
    } else if (i == 3) {
        return textureSize(depth_map3, 0);
    } else if (i == 4) {
        return textureSize(depth_map4, 0);
    }
}

float calc_shadow(int i) {
    vec3 pos = point_pos_light_space[i].xyz / point_pos_light_space[i].w * 0.5 + 0.5;
    float depth = get_depth(i, pos.xy);
    vec3 light_dir = normalize(light_sources[i].position - vec3(point_pos));
    vec3 norm = normalize(Normal);
    float bias = 0.0000015 / dot(light_dir, norm);

    float shadow = 0.0;
    vec2 pixel_size = 1.0 / get_texture_size(i);
    for(int x = -1; x <= 1; ++x) {
        for(int y = -1; y <= 1; ++y) {
           float near_point_depth = get_depth(i, pos.xy + vec2(x, y) * pixel_size);
           shadow += pos.z - bias > near_point_depth  ? 1.0 : 0.0;
        }
    }
    shadow /= 9.0;
    return 1 - shadow;
}

void main()
{
    vec4 preliminary_color = texture(Texture, TexCoord) + color;
    vec3 norm = normalize(Normal);
    vec3 summary_effects = vec3(0.0, 0.0, 0.0);
    for (int i = 0; i < count_of_light_sources; ++i) {
        vec3 additional_effect = calc_light_effect(light_sources[i], norm) * light_sources[i].intensity;
        if (is_shadowed_fs[i] == 1) {
            additional_effect *= calc_shadow(i);
        }
        summary_effects += additional_effect;
    }
    vec3 min_color = vec3(0.3f, 0.3f, 0.3f);
    if (count_of_light_sources == 0) {
        min_color = vec3(1.0f, 1.0f, 1.0f);
    }
    out_color = vec4((summary_effects + min_color),1.0f) * preliminary_color;
}

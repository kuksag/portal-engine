#version 330 core

in vec2 TexCoord;
in vec3 Normal;
in vec4 point_pos;
in vec4 point_pos_light_space;

struct LightSource {
    vec3 position;
    vec3 color;
};

const int MAX_COUNT_OF_LIGHT_SOURCES = 5;
uniform LightSource light_sources[MAX_COUNT_OF_LIGHT_SOURCES];
uniform int count_of_light_sources;

uniform vec3 camera_pos;
uniform sampler2D Texture;
uniform sampler2D depth_map;
uniform vec4 color;

out vec4 out_color;

vec3 calc_diffusion(LightSource light_source, vec3 light_dir, vec3 norm) {
    float diff = max(dot(norm, light_dir), 0.0);
    vec3 diffusion = diff * light_source.color;
    return diffusion;
}

vec3 calc_specular(LightSource light_source, vec3 light_dir, vec3 norm) {
    vec3 view_dir = normalize(camera_pos - vec3(point_pos));
    vec3 reflect_dir = reflect(-light_dir, norm);

    float spec = pow(max(dot(view_dir, reflect_dir), 0.0), 16);
    vec3 specular = 0.2f * spec * light_source.color;
    return specular;
}

float calc_attenuation(float dist) {
    return  1.0f / (1.0f + 0.007f * dist + 0.0002f * dist * dist);
}

vec3 calc_light_effect(LightSource light_source, vec3 norm) {
    vec3 light_dir = normalize(light_source.position - vec3(point_pos));

    vec3 diffusion = calc_diffusion(light_source, light_dir, norm);
    vec3 specular = calc_specular(light_source, light_dir, norm);

    if (diffusion == vec3(0.0, 0.0, 0.0)) {
        specular = vec3(0.0f, 0.0f, 0.0f);
    }

    float attenuation = calc_attenuation(distance(light_source.position, vec3(point_pos)));

    return attenuation * (diffusion + specular);
}

float calc_shadow() {
    vec3 pos = point_pos_light_space.xyz / point_pos_light_space.w * 0.5 + 0.5;
    float depth = texture(depth_map, pos.xy).r;
    return depth < pos.z ? 0.0 : 1.0;
}

void main()
{
    vec4 preliminary_color = color;
    vec3 norm = normalize(Normal);
    vec3 summary_effects = vec3(0.0, 0.0, 0.0);
    for (int i = 0; i < count_of_light_sources; ++i) {
        summary_effects += calc_light_effect(light_sources[i], norm);
    }
    vec3 min_color = vec3(0.3f, 0.3f, 0.3f);
    if (count_of_light_sources == 0) {
        min_color = vec3(1.0f, 1.0f, 1.0f);
    }
    out_color = vec4((calc_shadow() * summary_effects + min_color),1.0f) * preliminary_color;
}

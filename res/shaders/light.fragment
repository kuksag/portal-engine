#version 330 core

in vec3 Normal;
in vec3 point_pos;


uniform vec3 light_color;
uniform vec3 light_pos;
uniform vec3 camera_pos;
out vec4 color;

void main() {
    vec3 norm = normalize(Normal);
    vec3 light_dir = normalize(light_pos - point_pos);
    float diff = max(dot(norm, light_dir), 0.0);
    vec3 diffusion = diff * light_color;

    vec3 view_dir = normalize(camera_pos - point_pos);
    vec3 reflect_dir = reflect(-light_dir, norm);

    float spec = pow(max(dot(view_dir, reflect_dir), 0.0), 64);
    vec3 specular = 0.5f * spec * light_color;

    if (diff == 0.0) {
        specular = vec3(0.0f, 0.0f, 0.0f);
    }

    vec3 minimal_color = vec3(0.3f, 0.3f, 0.3f);
    color = vec4((minimal_color + diffusion + specular) * vec3(0.9f, 0.8f, 0.9f), 1.0f);
}